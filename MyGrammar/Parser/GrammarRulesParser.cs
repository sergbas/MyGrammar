//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Projects/MyGrammar\GrammarRules.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class GrammarRulesParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		IF=1, THEN=2, SEMI=3, IDENTIFIER=4, LPAREN=5, RPAREN=6, AND=7, OR=8, GT=9, 
		GE=10, LT=11, LE=12, EQ=13, MINUS=14, MULT=15, DIV=16, PLUS=17, TRUE=18, 
		FALSE=19, DECIMAL=20;
	public const int
		RULE_rule_set = 0, RULE_single_rule = 1, RULE_condition = 2, RULE_conclusion = 3, 
		RULE_logical_expr = 4, RULE_comparison_expr = 5, RULE_comparison_operand = 6, 
		RULE_comp_operator = 7, RULE_arithmetic_expr = 8, RULE_logical_entity = 9, 
		RULE_numeric_entity = 10;
	public static readonly string[] ruleNames = {
		"rule_set", "single_rule", "condition", "conclusion", "logical_expr", 
		"comparison_expr", "comparison_operand", "comp_operator", "arithmetic_expr", 
		"logical_entity", "numeric_entity"
	};

	private static readonly string[] _LiteralNames = {
	};
	private static readonly string[] _SymbolicNames = {
		null, "IF", "THEN", "SEMI", "IDENTIFIER", "LPAREN", "RPAREN", "AND", "OR", 
		"GT", "GE", "LT", "LE", "EQ", "MINUS", "MULT", "DIV", "PLUS", "TRUE", 
		"FALSE", "DECIMAL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "GrammarRules.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static GrammarRulesParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public GrammarRulesParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public GrammarRulesParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class Rule_setContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(GrammarRulesParser.Eof, 0); }
		public Single_ruleContext[] single_rule() {
			return GetRuleContexts<Single_ruleContext>();
		}
		public Single_ruleContext single_rule(int i) {
			return GetRuleContext<Single_ruleContext>(i);
		}
		public Rule_setContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_set; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarRulesListener typedListener = listener as IGrammarRulesListener;
			if (typedListener != null) typedListener.EnterRule_set(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarRulesListener typedListener = listener as IGrammarRulesListener;
			if (typedListener != null) typedListener.ExitRule_set(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarRulesVisitor<TResult> typedVisitor = visitor as IGrammarRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRule_set(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rule_setContext rule_set() {
		Rule_setContext _localctx = new Rule_setContext(Context, State);
		EnterRule(_localctx, 0, RULE_rule_set);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 25;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IF) {
				{
				{
				State = 22; single_rule();
				}
				}
				State = 27;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 28; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Single_ruleContext : ParserRuleContext {
		public ITerminalNode IF() { return GetToken(GrammarRulesParser.IF, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public ITerminalNode THEN() { return GetToken(GrammarRulesParser.THEN, 0); }
		public ConclusionContext conclusion() {
			return GetRuleContext<ConclusionContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(GrammarRulesParser.SEMI, 0); }
		public Single_ruleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_single_rule; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarRulesListener typedListener = listener as IGrammarRulesListener;
			if (typedListener != null) typedListener.EnterSingle_rule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarRulesListener typedListener = listener as IGrammarRulesListener;
			if (typedListener != null) typedListener.ExitSingle_rule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarRulesVisitor<TResult> typedVisitor = visitor as IGrammarRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingle_rule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Single_ruleContext single_rule() {
		Single_ruleContext _localctx = new Single_ruleContext(Context, State);
		EnterRule(_localctx, 2, RULE_single_rule);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 30; Match(IF);
			State = 31; condition();
			State = 32; Match(THEN);
			State = 33; conclusion();
			State = 34; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		public Logical_exprContext logical_expr() {
			return GetRuleContext<Logical_exprContext>(0);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarRulesListener typedListener = listener as IGrammarRulesListener;
			if (typedListener != null) typedListener.EnterCondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarRulesListener typedListener = listener as IGrammarRulesListener;
			if (typedListener != null) typedListener.ExitCondition(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarRulesVisitor<TResult> typedVisitor = visitor as IGrammarRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 4, RULE_condition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36; logical_expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConclusionContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(GrammarRulesParser.IDENTIFIER, 0); }
		public ConclusionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conclusion; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarRulesListener typedListener = listener as IGrammarRulesListener;
			if (typedListener != null) typedListener.EnterConclusion(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarRulesListener typedListener = listener as IGrammarRulesListener;
			if (typedListener != null) typedListener.ExitConclusion(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarRulesVisitor<TResult> typedVisitor = visitor as IGrammarRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConclusion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConclusionContext conclusion() {
		ConclusionContext _localctx = new ConclusionContext(Context, State);
		EnterRule(_localctx, 6, RULE_conclusion);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 38; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Logical_exprContext : ParserRuleContext {
		public Logical_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logical_expr; } }
	 
		public Logical_exprContext() { }
		public virtual void CopyFrom(Logical_exprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LogicalEntityContext : Logical_exprContext {
		public Logical_entityContext logical_entity() {
			return GetRuleContext<Logical_entityContext>(0);
		}
		public LogicalEntityContext(Logical_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarRulesListener typedListener = listener as IGrammarRulesListener;
			if (typedListener != null) typedListener.EnterLogicalEntity(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarRulesListener typedListener = listener as IGrammarRulesListener;
			if (typedListener != null) typedListener.ExitLogicalEntity(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarRulesVisitor<TResult> typedVisitor = visitor as IGrammarRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalEntity(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparisonExpressionContext : Logical_exprContext {
		public Comparison_exprContext comparison_expr() {
			return GetRuleContext<Comparison_exprContext>(0);
		}
		public ComparisonExpressionContext(Logical_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarRulesListener typedListener = listener as IGrammarRulesListener;
			if (typedListener != null) typedListener.EnterComparisonExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarRulesListener typedListener = listener as IGrammarRulesListener;
			if (typedListener != null) typedListener.ExitComparisonExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarRulesVisitor<TResult> typedVisitor = visitor as IGrammarRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalExpressionInParenContext : Logical_exprContext {
		public ITerminalNode LPAREN() { return GetToken(GrammarRulesParser.LPAREN, 0); }
		public Logical_exprContext logical_expr() {
			return GetRuleContext<Logical_exprContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(GrammarRulesParser.RPAREN, 0); }
		public LogicalExpressionInParenContext(Logical_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarRulesListener typedListener = listener as IGrammarRulesListener;
			if (typedListener != null) typedListener.EnterLogicalExpressionInParen(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarRulesListener typedListener = listener as IGrammarRulesListener;
			if (typedListener != null) typedListener.ExitLogicalExpressionInParen(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarRulesVisitor<TResult> typedVisitor = visitor as IGrammarRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalExpressionInParen(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalExpressionAndContext : Logical_exprContext {
		public Logical_exprContext[] logical_expr() {
			return GetRuleContexts<Logical_exprContext>();
		}
		public Logical_exprContext logical_expr(int i) {
			return GetRuleContext<Logical_exprContext>(i);
		}
		public ITerminalNode AND() { return GetToken(GrammarRulesParser.AND, 0); }
		public LogicalExpressionAndContext(Logical_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarRulesListener typedListener = listener as IGrammarRulesListener;
			if (typedListener != null) typedListener.EnterLogicalExpressionAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarRulesListener typedListener = listener as IGrammarRulesListener;
			if (typedListener != null) typedListener.ExitLogicalExpressionAnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarRulesVisitor<TResult> typedVisitor = visitor as IGrammarRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalExpressionAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalExpressionOrContext : Logical_exprContext {
		public Logical_exprContext[] logical_expr() {
			return GetRuleContexts<Logical_exprContext>();
		}
		public Logical_exprContext logical_expr(int i) {
			return GetRuleContext<Logical_exprContext>(i);
		}
		public ITerminalNode OR() { return GetToken(GrammarRulesParser.OR, 0); }
		public LogicalExpressionOrContext(Logical_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarRulesListener typedListener = listener as IGrammarRulesListener;
			if (typedListener != null) typedListener.EnterLogicalExpressionOr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarRulesListener typedListener = listener as IGrammarRulesListener;
			if (typedListener != null) typedListener.ExitLogicalExpressionOr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarRulesVisitor<TResult> typedVisitor = visitor as IGrammarRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalExpressionOr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Logical_exprContext logical_expr() {
		return logical_expr(0);
	}

	private Logical_exprContext logical_expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Logical_exprContext _localctx = new Logical_exprContext(Context, _parentState);
		Logical_exprContext _prevctx = _localctx;
		int _startState = 8;
		EnterRecursionRule(_localctx, 8, RULE_logical_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 47;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				{
				_localctx = new ComparisonExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 41; comparison_expr();
				}
				break;
			case 2:
				{
				_localctx = new LogicalExpressionInParenContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 42; Match(LPAREN);
				State = 43; logical_expr(0);
				State = 44; Match(RPAREN);
				}
				break;
			case 3:
				{
				_localctx = new LogicalEntityContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 46; logical_entity();
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 57;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 55;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
					case 1:
						{
						_localctx = new LogicalExpressionAndContext(new Logical_exprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_logical_expr);
						State = 49;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 50; Match(AND);
						State = 51; logical_expr(6);
						}
						break;
					case 2:
						{
						_localctx = new LogicalExpressionOrContext(new Logical_exprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_logical_expr);
						State = 52;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 53; Match(OR);
						State = 54; logical_expr(5);
						}
						break;
					}
					} 
				}
				State = 59;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Comparison_exprContext : ParserRuleContext {
		public Comparison_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison_expr; } }
	 
		public Comparison_exprContext() { }
		public virtual void CopyFrom(Comparison_exprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ComparisonExpressionParensContext : Comparison_exprContext {
		public ITerminalNode LPAREN() { return GetToken(GrammarRulesParser.LPAREN, 0); }
		public Comparison_exprContext comparison_expr() {
			return GetRuleContext<Comparison_exprContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(GrammarRulesParser.RPAREN, 0); }
		public ComparisonExpressionParensContext(Comparison_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarRulesListener typedListener = listener as IGrammarRulesListener;
			if (typedListener != null) typedListener.EnterComparisonExpressionParens(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarRulesListener typedListener = listener as IGrammarRulesListener;
			if (typedListener != null) typedListener.ExitComparisonExpressionParens(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarRulesVisitor<TResult> typedVisitor = visitor as IGrammarRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonExpressionParens(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparisonExpressionWithOperatorContext : Comparison_exprContext {
		public Comparison_operandContext[] comparison_operand() {
			return GetRuleContexts<Comparison_operandContext>();
		}
		public Comparison_operandContext comparison_operand(int i) {
			return GetRuleContext<Comparison_operandContext>(i);
		}
		public Comp_operatorContext comp_operator() {
			return GetRuleContext<Comp_operatorContext>(0);
		}
		public ComparisonExpressionWithOperatorContext(Comparison_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarRulesListener typedListener = listener as IGrammarRulesListener;
			if (typedListener != null) typedListener.EnterComparisonExpressionWithOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarRulesListener typedListener = listener as IGrammarRulesListener;
			if (typedListener != null) typedListener.ExitComparisonExpressionWithOperator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarRulesVisitor<TResult> typedVisitor = visitor as IGrammarRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonExpressionWithOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Comparison_exprContext comparison_expr() {
		Comparison_exprContext _localctx = new Comparison_exprContext(Context, State);
		EnterRule(_localctx, 10, RULE_comparison_expr);
		try {
			State = 68;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				_localctx = new ComparisonExpressionWithOperatorContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 60; comparison_operand();
				State = 61; comp_operator();
				State = 62; comparison_operand();
				}
				break;
			case 2:
				_localctx = new ComparisonExpressionParensContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 64; Match(LPAREN);
				State = 65; comparison_expr();
				State = 66; Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comparison_operandContext : ParserRuleContext {
		public Arithmetic_exprContext arithmetic_expr() {
			return GetRuleContext<Arithmetic_exprContext>(0);
		}
		public Comparison_operandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparison_operand; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarRulesListener typedListener = listener as IGrammarRulesListener;
			if (typedListener != null) typedListener.EnterComparison_operand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarRulesListener typedListener = listener as IGrammarRulesListener;
			if (typedListener != null) typedListener.ExitComparison_operand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarRulesVisitor<TResult> typedVisitor = visitor as IGrammarRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparison_operand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Comparison_operandContext comparison_operand() {
		Comparison_operandContext _localctx = new Comparison_operandContext(Context, State);
		EnterRule(_localctx, 12, RULE_comparison_operand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70; arithmetic_expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Comp_operatorContext : ParserRuleContext {
		public ITerminalNode GT() { return GetToken(GrammarRulesParser.GT, 0); }
		public ITerminalNode GE() { return GetToken(GrammarRulesParser.GE, 0); }
		public ITerminalNode LT() { return GetToken(GrammarRulesParser.LT, 0); }
		public ITerminalNode LE() { return GetToken(GrammarRulesParser.LE, 0); }
		public ITerminalNode EQ() { return GetToken(GrammarRulesParser.EQ, 0); }
		public Comp_operatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comp_operator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarRulesListener typedListener = listener as IGrammarRulesListener;
			if (typedListener != null) typedListener.EnterComp_operator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarRulesListener typedListener = listener as IGrammarRulesListener;
			if (typedListener != null) typedListener.ExitComp_operator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarRulesVisitor<TResult> typedVisitor = visitor as IGrammarRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComp_operator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Comp_operatorContext comp_operator() {
		Comp_operatorContext _localctx = new Comp_operatorContext(Context, State);
		EnterRule(_localctx, 14, RULE_comp_operator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GT) | (1L << GE) | (1L << LT) | (1L << LE) | (1L << EQ))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Arithmetic_exprContext : ParserRuleContext {
		public Arithmetic_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arithmetic_expr; } }
	 
		public Arithmetic_exprContext() { }
		public virtual void CopyFrom(Arithmetic_exprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ArithmeticExpressionMultContext : Arithmetic_exprContext {
		public Arithmetic_exprContext[] arithmetic_expr() {
			return GetRuleContexts<Arithmetic_exprContext>();
		}
		public Arithmetic_exprContext arithmetic_expr(int i) {
			return GetRuleContext<Arithmetic_exprContext>(i);
		}
		public ITerminalNode MULT() { return GetToken(GrammarRulesParser.MULT, 0); }
		public ArithmeticExpressionMultContext(Arithmetic_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarRulesListener typedListener = listener as IGrammarRulesListener;
			if (typedListener != null) typedListener.EnterArithmeticExpressionMult(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarRulesListener typedListener = listener as IGrammarRulesListener;
			if (typedListener != null) typedListener.ExitArithmeticExpressionMult(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarRulesVisitor<TResult> typedVisitor = visitor as IGrammarRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmeticExpressionMult(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArithmeticExpressionMinusContext : Arithmetic_exprContext {
		public Arithmetic_exprContext[] arithmetic_expr() {
			return GetRuleContexts<Arithmetic_exprContext>();
		}
		public Arithmetic_exprContext arithmetic_expr(int i) {
			return GetRuleContext<Arithmetic_exprContext>(i);
		}
		public ITerminalNode MINUS() { return GetToken(GrammarRulesParser.MINUS, 0); }
		public ArithmeticExpressionMinusContext(Arithmetic_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarRulesListener typedListener = listener as IGrammarRulesListener;
			if (typedListener != null) typedListener.EnterArithmeticExpressionMinus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarRulesListener typedListener = listener as IGrammarRulesListener;
			if (typedListener != null) typedListener.ExitArithmeticExpressionMinus(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarRulesVisitor<TResult> typedVisitor = visitor as IGrammarRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmeticExpressionMinus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArithmeticExpressionParensContext : Arithmetic_exprContext {
		public ITerminalNode LPAREN() { return GetToken(GrammarRulesParser.LPAREN, 0); }
		public Arithmetic_exprContext arithmetic_expr() {
			return GetRuleContext<Arithmetic_exprContext>(0);
		}
		public ITerminalNode RPAREN() { return GetToken(GrammarRulesParser.RPAREN, 0); }
		public ArithmeticExpressionParensContext(Arithmetic_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarRulesListener typedListener = listener as IGrammarRulesListener;
			if (typedListener != null) typedListener.EnterArithmeticExpressionParens(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarRulesListener typedListener = listener as IGrammarRulesListener;
			if (typedListener != null) typedListener.ExitArithmeticExpressionParens(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarRulesVisitor<TResult> typedVisitor = visitor as IGrammarRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmeticExpressionParens(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArithmeticExpressionNumericEntityContext : Arithmetic_exprContext {
		public Numeric_entityContext numeric_entity() {
			return GetRuleContext<Numeric_entityContext>(0);
		}
		public ArithmeticExpressionNumericEntityContext(Arithmetic_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarRulesListener typedListener = listener as IGrammarRulesListener;
			if (typedListener != null) typedListener.EnterArithmeticExpressionNumericEntity(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarRulesListener typedListener = listener as IGrammarRulesListener;
			if (typedListener != null) typedListener.ExitArithmeticExpressionNumericEntity(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarRulesVisitor<TResult> typedVisitor = visitor as IGrammarRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmeticExpressionNumericEntity(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArithmeticExpressionDivContext : Arithmetic_exprContext {
		public Arithmetic_exprContext[] arithmetic_expr() {
			return GetRuleContexts<Arithmetic_exprContext>();
		}
		public Arithmetic_exprContext arithmetic_expr(int i) {
			return GetRuleContext<Arithmetic_exprContext>(i);
		}
		public ITerminalNode DIV() { return GetToken(GrammarRulesParser.DIV, 0); }
		public ArithmeticExpressionDivContext(Arithmetic_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarRulesListener typedListener = listener as IGrammarRulesListener;
			if (typedListener != null) typedListener.EnterArithmeticExpressionDiv(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarRulesListener typedListener = listener as IGrammarRulesListener;
			if (typedListener != null) typedListener.ExitArithmeticExpressionDiv(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarRulesVisitor<TResult> typedVisitor = visitor as IGrammarRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmeticExpressionDiv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArithmeticExpressionPlusContext : Arithmetic_exprContext {
		public Arithmetic_exprContext[] arithmetic_expr() {
			return GetRuleContexts<Arithmetic_exprContext>();
		}
		public Arithmetic_exprContext arithmetic_expr(int i) {
			return GetRuleContext<Arithmetic_exprContext>(i);
		}
		public ITerminalNode PLUS() { return GetToken(GrammarRulesParser.PLUS, 0); }
		public ArithmeticExpressionPlusContext(Arithmetic_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarRulesListener typedListener = listener as IGrammarRulesListener;
			if (typedListener != null) typedListener.EnterArithmeticExpressionPlus(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarRulesListener typedListener = listener as IGrammarRulesListener;
			if (typedListener != null) typedListener.ExitArithmeticExpressionPlus(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarRulesVisitor<TResult> typedVisitor = visitor as IGrammarRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmeticExpressionPlus(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArithmeticExpressionNegationContext : Arithmetic_exprContext {
		public ITerminalNode MINUS() { return GetToken(GrammarRulesParser.MINUS, 0); }
		public Arithmetic_exprContext arithmetic_expr() {
			return GetRuleContext<Arithmetic_exprContext>(0);
		}
		public ArithmeticExpressionNegationContext(Arithmetic_exprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarRulesListener typedListener = listener as IGrammarRulesListener;
			if (typedListener != null) typedListener.EnterArithmeticExpressionNegation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarRulesListener typedListener = listener as IGrammarRulesListener;
			if (typedListener != null) typedListener.ExitArithmeticExpressionNegation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarRulesVisitor<TResult> typedVisitor = visitor as IGrammarRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmeticExpressionNegation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Arithmetic_exprContext arithmetic_expr() {
		return arithmetic_expr(0);
	}

	private Arithmetic_exprContext arithmetic_expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Arithmetic_exprContext _localctx = new Arithmetic_exprContext(Context, _parentState);
		Arithmetic_exprContext _prevctx = _localctx;
		int _startState = 16;
		EnterRecursionRule(_localctx, 16, RULE_arithmetic_expr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 82;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MINUS:
				{
				_localctx = new ArithmeticExpressionNegationContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 75; Match(MINUS);
				State = 76; arithmetic_expr(3);
				}
				break;
			case LPAREN:
				{
				_localctx = new ArithmeticExpressionParensContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 77; Match(LPAREN);
				State = 78; arithmetic_expr(0);
				State = 79; Match(RPAREN);
				}
				break;
			case IDENTIFIER:
			case DECIMAL:
				{
				_localctx = new ArithmeticExpressionNumericEntityContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 81; numeric_entity();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 98;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 96;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
					case 1:
						{
						_localctx = new ArithmeticExpressionMultContext(new Arithmetic_exprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_arithmetic_expr);
						State = 84;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 85; Match(MULT);
						State = 86; arithmetic_expr(8);
						}
						break;
					case 2:
						{
						_localctx = new ArithmeticExpressionDivContext(new Arithmetic_exprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_arithmetic_expr);
						State = 87;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 88; Match(DIV);
						State = 89; arithmetic_expr(7);
						}
						break;
					case 3:
						{
						_localctx = new ArithmeticExpressionPlusContext(new Arithmetic_exprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_arithmetic_expr);
						State = 90;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 91; Match(PLUS);
						State = 92; arithmetic_expr(6);
						}
						break;
					case 4:
						{
						_localctx = new ArithmeticExpressionMinusContext(new Arithmetic_exprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_arithmetic_expr);
						State = 93;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 94; Match(MINUS);
						State = 95; arithmetic_expr(5);
						}
						break;
					}
					} 
				}
				State = 100;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Logical_entityContext : ParserRuleContext {
		public Logical_entityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logical_entity; } }
	 
		public Logical_entityContext() { }
		public virtual void CopyFrom(Logical_entityContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class LogicalVariableContext : Logical_entityContext {
		public ITerminalNode IDENTIFIER() { return GetToken(GrammarRulesParser.IDENTIFIER, 0); }
		public LogicalVariableContext(Logical_entityContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarRulesListener typedListener = listener as IGrammarRulesListener;
			if (typedListener != null) typedListener.EnterLogicalVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarRulesListener typedListener = listener as IGrammarRulesListener;
			if (typedListener != null) typedListener.ExitLogicalVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarRulesVisitor<TResult> typedVisitor = visitor as IGrammarRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalVariable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalConstContext : Logical_entityContext {
		public ITerminalNode TRUE() { return GetToken(GrammarRulesParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(GrammarRulesParser.FALSE, 0); }
		public LogicalConstContext(Logical_entityContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarRulesListener typedListener = listener as IGrammarRulesListener;
			if (typedListener != null) typedListener.EnterLogicalConst(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarRulesListener typedListener = listener as IGrammarRulesListener;
			if (typedListener != null) typedListener.ExitLogicalConst(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarRulesVisitor<TResult> typedVisitor = visitor as IGrammarRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalConst(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Logical_entityContext logical_entity() {
		Logical_entityContext _localctx = new Logical_entityContext(Context, State);
		EnterRule(_localctx, 18, RULE_logical_entity);
		int _la;
		try {
			State = 103;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TRUE:
			case FALSE:
				_localctx = new LogicalConstContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 101;
				_la = TokenStream.LA(1);
				if ( !(_la==TRUE || _la==FALSE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case IDENTIFIER:
				_localctx = new LogicalVariableContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 102; Match(IDENTIFIER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Numeric_entityContext : ParserRuleContext {
		public Numeric_entityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numeric_entity; } }
	 
		public Numeric_entityContext() { }
		public virtual void CopyFrom(Numeric_entityContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NumericConstContext : Numeric_entityContext {
		public ITerminalNode DECIMAL() { return GetToken(GrammarRulesParser.DECIMAL, 0); }
		public NumericConstContext(Numeric_entityContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarRulesListener typedListener = listener as IGrammarRulesListener;
			if (typedListener != null) typedListener.EnterNumericConst(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarRulesListener typedListener = listener as IGrammarRulesListener;
			if (typedListener != null) typedListener.ExitNumericConst(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarRulesVisitor<TResult> typedVisitor = visitor as IGrammarRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericConst(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumericVariableContext : Numeric_entityContext {
		public ITerminalNode IDENTIFIER() { return GetToken(GrammarRulesParser.IDENTIFIER, 0); }
		public NumericVariableContext(Numeric_entityContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGrammarRulesListener typedListener = listener as IGrammarRulesListener;
			if (typedListener != null) typedListener.EnterNumericVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGrammarRulesListener typedListener = listener as IGrammarRulesListener;
			if (typedListener != null) typedListener.ExitNumericVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGrammarRulesVisitor<TResult> typedVisitor = visitor as IGrammarRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Numeric_entityContext numeric_entity() {
		Numeric_entityContext _localctx = new Numeric_entityContext(Context, State);
		EnterRule(_localctx, 20, RULE_numeric_entity);
		try {
			State = 107;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DECIMAL:
				_localctx = new NumericConstContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 105; Match(DECIMAL);
				}
				break;
			case IDENTIFIER:
				_localctx = new NumericVariableContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 106; Match(IDENTIFIER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 4: return logical_expr_sempred((Logical_exprContext)_localctx, predIndex);
		case 8: return arithmetic_expr_sempred((Arithmetic_exprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool logical_expr_sempred(Logical_exprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 5);
		case 1: return Precpred(Context, 4);
		}
		return true;
	}
	private bool arithmetic_expr_sempred(Arithmetic_exprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 7);
		case 3: return Precpred(Context, 6);
		case 4: return Precpred(Context, 5);
		case 5: return Precpred(Context, 4);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x16', 'p', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x3', '\x2', '\a', '\x2', '\x1A', '\n', '\x2', 
		'\f', '\x2', '\xE', '\x2', '\x1D', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x32', '\n', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\a', '\x6', ':', '\n', '\x6', '\f', '\x6', '\xE', '\x6', '=', 
		'\v', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', 'G', '\n', '\a', 
		'\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x5', '\n', 'U', '\n', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\a', '\n', '\x63', 
		'\n', '\n', '\f', '\n', '\xE', '\n', '\x66', '\v', '\n', '\x3', '\v', 
		'\x3', '\v', '\x5', '\v', 'j', '\n', '\v', '\x3', '\f', '\x3', '\f', '\x5', 
		'\f', 'n', '\n', '\f', '\x3', '\f', '\x2', '\x4', '\n', '\x12', '\r', 
		'\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', 
		'\x16', '\x2', '\x4', '\x3', '\x2', '\v', '\xF', '\x3', '\x2', '\x14', 
		'\x15', '\x2', 'r', '\x2', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x4', 
		' ', '\x3', '\x2', '\x2', '\x2', '\x6', '&', '\x3', '\x2', '\x2', '\x2', 
		'\b', '(', '\x3', '\x2', '\x2', '\x2', '\n', '\x31', '\x3', '\x2', '\x2', 
		'\x2', '\f', '\x46', '\x3', '\x2', '\x2', '\x2', '\xE', 'H', '\x3', '\x2', 
		'\x2', '\x2', '\x10', 'J', '\x3', '\x2', '\x2', '\x2', '\x12', 'T', '\x3', 
		'\x2', '\x2', '\x2', '\x14', 'i', '\x3', '\x2', '\x2', '\x2', '\x16', 
		'm', '\x3', '\x2', '\x2', '\x2', '\x18', '\x1A', '\x5', '\x4', '\x3', 
		'\x2', '\x19', '\x18', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\x1B', '\x19', '\x3', '\x2', '\x2', '\x2', '\x1B', 
		'\x1C', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x1E', '\x3', '\x2', '\x2', 
		'\x2', '\x1D', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x1F', '\a', 
		'\x2', '\x2', '\x3', '\x1F', '\x3', '\x3', '\x2', '\x2', '\x2', ' ', '!', 
		'\a', '\x3', '\x2', '\x2', '!', '\"', '\x5', '\x6', '\x4', '\x2', '\"', 
		'#', '\a', '\x4', '\x2', '\x2', '#', '$', '\x5', '\b', '\x5', '\x2', '$', 
		'%', '\a', '\x5', '\x2', '\x2', '%', '\x5', '\x3', '\x2', '\x2', '\x2', 
		'&', '\'', '\x5', '\n', '\x6', '\x2', '\'', '\a', '\x3', '\x2', '\x2', 
		'\x2', '(', ')', '\a', '\x6', '\x2', '\x2', ')', '\t', '\x3', '\x2', '\x2', 
		'\x2', '*', '+', '\b', '\x6', '\x1', '\x2', '+', '\x32', '\x5', '\f', 
		'\a', '\x2', ',', '-', '\a', '\a', '\x2', '\x2', '-', '.', '\x5', '\n', 
		'\x6', '\x2', '.', '/', '\a', '\b', '\x2', '\x2', '/', '\x32', '\x3', 
		'\x2', '\x2', '\x2', '\x30', '\x32', '\x5', '\x14', '\v', '\x2', '\x31', 
		'*', '\x3', '\x2', '\x2', '\x2', '\x31', ',', '\x3', '\x2', '\x2', '\x2', 
		'\x31', '\x30', '\x3', '\x2', '\x2', '\x2', '\x32', ';', '\x3', '\x2', 
		'\x2', '\x2', '\x33', '\x34', '\f', '\a', '\x2', '\x2', '\x34', '\x35', 
		'\a', '\t', '\x2', '\x2', '\x35', ':', '\x5', '\n', '\x6', '\b', '\x36', 
		'\x37', '\f', '\x6', '\x2', '\x2', '\x37', '\x38', '\a', '\n', '\x2', 
		'\x2', '\x38', ':', '\x5', '\n', '\x6', '\a', '\x39', '\x33', '\x3', '\x2', 
		'\x2', '\x2', '\x39', '\x36', '\x3', '\x2', '\x2', '\x2', ':', '=', '\x3', 
		'\x2', '\x2', '\x2', ';', '\x39', '\x3', '\x2', '\x2', '\x2', ';', '<', 
		'\x3', '\x2', '\x2', '\x2', '<', '\v', '\x3', '\x2', '\x2', '\x2', '=', 
		';', '\x3', '\x2', '\x2', '\x2', '>', '?', '\x5', '\xE', '\b', '\x2', 
		'?', '@', '\x5', '\x10', '\t', '\x2', '@', '\x41', '\x5', '\xE', '\b', 
		'\x2', '\x41', 'G', '\x3', '\x2', '\x2', '\x2', '\x42', '\x43', '\a', 
		'\a', '\x2', '\x2', '\x43', '\x44', '\x5', '\f', '\a', '\x2', '\x44', 
		'\x45', '\a', '\b', '\x2', '\x2', '\x45', 'G', '\x3', '\x2', '\x2', '\x2', 
		'\x46', '>', '\x3', '\x2', '\x2', '\x2', '\x46', '\x42', '\x3', '\x2', 
		'\x2', '\x2', 'G', '\r', '\x3', '\x2', '\x2', '\x2', 'H', 'I', '\x5', 
		'\x12', '\n', '\x2', 'I', '\xF', '\x3', '\x2', '\x2', '\x2', 'J', 'K', 
		'\t', '\x2', '\x2', '\x2', 'K', '\x11', '\x3', '\x2', '\x2', '\x2', 'L', 
		'M', '\b', '\n', '\x1', '\x2', 'M', 'N', '\a', '\x10', '\x2', '\x2', 'N', 
		'U', '\x5', '\x12', '\n', '\x5', 'O', 'P', '\a', '\a', '\x2', '\x2', 'P', 
		'Q', '\x5', '\x12', '\n', '\x2', 'Q', 'R', '\a', '\b', '\x2', '\x2', 'R', 
		'U', '\x3', '\x2', '\x2', '\x2', 'S', 'U', '\x5', '\x16', '\f', '\x2', 
		'T', 'L', '\x3', '\x2', '\x2', '\x2', 'T', 'O', '\x3', '\x2', '\x2', '\x2', 
		'T', 'S', '\x3', '\x2', '\x2', '\x2', 'U', '\x64', '\x3', '\x2', '\x2', 
		'\x2', 'V', 'W', '\f', '\t', '\x2', '\x2', 'W', 'X', '\a', '\x11', '\x2', 
		'\x2', 'X', '\x63', '\x5', '\x12', '\n', '\n', 'Y', 'Z', '\f', '\b', '\x2', 
		'\x2', 'Z', '[', '\a', '\x12', '\x2', '\x2', '[', '\x63', '\x5', '\x12', 
		'\n', '\t', '\\', ']', '\f', '\a', '\x2', '\x2', ']', '^', '\a', '\x13', 
		'\x2', '\x2', '^', '\x63', '\x5', '\x12', '\n', '\b', '_', '`', '\f', 
		'\x6', '\x2', '\x2', '`', '\x61', '\a', '\x10', '\x2', '\x2', '\x61', 
		'\x63', '\x5', '\x12', '\n', '\a', '\x62', 'V', '\x3', '\x2', '\x2', '\x2', 
		'\x62', 'Y', '\x3', '\x2', '\x2', '\x2', '\x62', '\\', '\x3', '\x2', '\x2', 
		'\x2', '\x62', '_', '\x3', '\x2', '\x2', '\x2', '\x63', '\x66', '\x3', 
		'\x2', '\x2', '\x2', '\x64', '\x62', '\x3', '\x2', '\x2', '\x2', '\x64', 
		'\x65', '\x3', '\x2', '\x2', '\x2', '\x65', '\x13', '\x3', '\x2', '\x2', 
		'\x2', '\x66', '\x64', '\x3', '\x2', '\x2', '\x2', 'g', 'j', '\t', '\x3', 
		'\x2', '\x2', 'h', 'j', '\a', '\x6', '\x2', '\x2', 'i', 'g', '\x3', '\x2', 
		'\x2', '\x2', 'i', 'h', '\x3', '\x2', '\x2', '\x2', 'j', '\x15', '\x3', 
		'\x2', '\x2', '\x2', 'k', 'n', '\a', '\x16', '\x2', '\x2', 'l', 'n', '\a', 
		'\x6', '\x2', '\x2', 'm', 'k', '\x3', '\x2', '\x2', '\x2', 'm', 'l', '\x3', 
		'\x2', '\x2', '\x2', 'n', '\x17', '\x3', '\x2', '\x2', '\x2', '\f', '\x1B', 
		'\x31', '\x39', ';', '\x46', 'T', '\x62', '\x64', 'i', 'm',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
