//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Projects/MyGrammar\GrammarLexer.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class GrammarLexerLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		IF=1, THEN=2, AND=3, OR=4, TRUE=5, FALSE=6, MULT=7, DIV=8, PLUS=9, MINUS=10, 
		GT=11, GE=12, LT=13, LE=14, EQ=15, LPAREN=16, RPAREN=17, DECIMAL=18, IDENTIFIER=19, 
		SEMI=20, COMMENT=21, WS=22;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"IF", "THEN", "AND", "OR", "TRUE", "FALSE", "MULT", "DIV", "PLUS", "MINUS", 
		"GT", "GE", "LT", "LE", "EQ", "LPAREN", "RPAREN", "DECIMAL", "IDENTIFIER", 
		"SEMI", "COMMENT", "WS"
	};


	public GrammarLexerLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public GrammarLexerLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'if'", "'then'", "'and'", "'or'", "'true'", "'false'", "'*'", "'/'", 
		"'+'", "'-'", "'>'", "'>='", "'<'", "'<='", "'='", "'('", "')'", null, 
		null, "';'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "IF", "THEN", "AND", "OR", "TRUE", "FALSE", "MULT", "DIV", "PLUS", 
		"MINUS", "GT", "GE", "LT", "LE", "EQ", "LPAREN", "RPAREN", "DECIMAL", 
		"IDENTIFIER", "SEMI", "COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "GrammarLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static GrammarLexerLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\x18', '\x8E', '\b', '\x1', '\x4', '\x2', '\t', '\x2', 
		'\x4', '\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', 
		'\x5', '\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', 
		'\t', '\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', 
		'\t', '\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', 
		'\t', '\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', 
		'\b', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\v', 
		'\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x13', '\x5', '\x13', '\x63', '\n', '\x13', '\x3', 
		'\x13', '\x6', '\x13', '\x66', '\n', '\x13', '\r', '\x13', '\xE', '\x13', 
		'g', '\x3', '\x13', '\x3', '\x13', '\x6', '\x13', 'l', '\n', '\x13', '\r', 
		'\x13', '\xE', '\x13', 'm', '\x5', '\x13', 'p', '\n', '\x13', '\x3', '\x14', 
		'\x3', '\x14', '\a', '\x14', 't', '\n', '\x14', '\f', '\x14', '\xE', '\x14', 
		'w', '\v', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x6', '\x16', '\x7F', '\n', '\x16', 
		'\r', '\x16', '\xE', '\x16', '\x80', '\x3', '\x16', '\x5', '\x16', '\x84', 
		'\n', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x6', '\x17', 
		'\x89', '\n', '\x17', '\r', '\x17', '\xE', '\x17', '\x8A', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x80', '\x2', '\x18', '\x3', '\x3', '\x5', '\x4', 
		'\a', '\x5', '\t', '\x6', '\v', '\a', '\r', '\b', '\xF', '\t', '\x11', 
		'\n', '\x13', '\v', '\x15', '\f', '\x17', '\r', '\x19', '\xE', '\x1B', 
		'\xF', '\x1D', '\x10', '\x1F', '\x11', '!', '\x12', '#', '\x13', '%', 
		'\x14', '\'', '\x15', ')', '\x16', '+', '\x17', '-', '\x18', '\x3', '\x2', 
		'\a', '\x3', '\x2', '\x32', ';', '\x5', '\x2', '\x43', '\\', '\x61', '\x61', 
		'\x63', '|', '\x6', '\x2', '\x32', ';', '\x43', '\\', '\x61', '\x61', 
		'\x63', '|', '\x3', '\x3', '\f', '\f', '\x5', '\x2', '\v', '\f', '\xE', 
		'\xF', '\"', '\"', '\x2', '\x94', '\x2', '\x3', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\x5', '\x3', '\x2', '\x2', '\x2', '\x2', '\a', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\t', '\x3', '\x2', '\x2', '\x2', '\x2', '\v', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\r', '\x3', '\x2', '\x2', '\x2', '\x2', '\xF', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\x11', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\x13', '\x3', '\x2', '\x2', '\x2', '\x2', '\x15', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '\x17', '\x3', '\x2', '\x2', '\x2', '\x2', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x2', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\x2', '\x1F', '\x3', '\x2', '\x2', 
		'\x2', '\x2', '!', '\x3', '\x2', '\x2', '\x2', '\x2', '#', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '%', '\x3', '\x2', '\x2', '\x2', '\x2', '\'', '\x3', 
		'\x2', '\x2', '\x2', '\x2', ')', '\x3', '\x2', '\x2', '\x2', '\x2', '+', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '-', '\x3', '\x2', '\x2', '\x2', '\x3', 
		'/', '\x3', '\x2', '\x2', '\x2', '\x5', '\x32', '\x3', '\x2', '\x2', '\x2', 
		'\a', '\x37', '\x3', '\x2', '\x2', '\x2', '\t', ';', '\x3', '\x2', '\x2', 
		'\x2', '\v', '>', '\x3', '\x2', '\x2', '\x2', '\r', '\x43', '\x3', '\x2', 
		'\x2', '\x2', '\xF', 'I', '\x3', '\x2', '\x2', '\x2', '\x11', 'K', '\x3', 
		'\x2', '\x2', '\x2', '\x13', 'M', '\x3', '\x2', '\x2', '\x2', '\x15', 
		'O', '\x3', '\x2', '\x2', '\x2', '\x17', 'Q', '\x3', '\x2', '\x2', '\x2', 
		'\x19', 'S', '\x3', '\x2', '\x2', '\x2', '\x1B', 'V', '\x3', '\x2', '\x2', 
		'\x2', '\x1D', 'X', '\x3', '\x2', '\x2', '\x2', '\x1F', '[', '\x3', '\x2', 
		'\x2', '\x2', '!', ']', '\x3', '\x2', '\x2', '\x2', '#', '_', '\x3', '\x2', 
		'\x2', '\x2', '%', '\x62', '\x3', '\x2', '\x2', '\x2', '\'', 'q', '\x3', 
		'\x2', '\x2', '\x2', ')', 'x', '\x3', '\x2', '\x2', '\x2', '+', 'z', '\x3', 
		'\x2', '\x2', '\x2', '-', '\x88', '\x3', '\x2', '\x2', '\x2', '/', '\x30', 
		'\a', 'k', '\x2', '\x2', '\x30', '\x31', '\a', 'h', '\x2', '\x2', '\x31', 
		'\x4', '\x3', '\x2', '\x2', '\x2', '\x32', '\x33', '\a', 'v', '\x2', '\x2', 
		'\x33', '\x34', '\a', 'j', '\x2', '\x2', '\x34', '\x35', '\a', 'g', '\x2', 
		'\x2', '\x35', '\x36', '\a', 'p', '\x2', '\x2', '\x36', '\x6', '\x3', 
		'\x2', '\x2', '\x2', '\x37', '\x38', '\a', '\x63', '\x2', '\x2', '\x38', 
		'\x39', '\a', 'p', '\x2', '\x2', '\x39', ':', '\a', '\x66', '\x2', '\x2', 
		':', '\b', '\x3', '\x2', '\x2', '\x2', ';', '<', '\a', 'q', '\x2', '\x2', 
		'<', '=', '\a', 't', '\x2', '\x2', '=', '\n', '\x3', '\x2', '\x2', '\x2', 
		'>', '?', '\a', 'v', '\x2', '\x2', '?', '@', '\a', 't', '\x2', '\x2', 
		'@', '\x41', '\a', 'w', '\x2', '\x2', '\x41', '\x42', '\a', 'g', '\x2', 
		'\x2', '\x42', '\f', '\x3', '\x2', '\x2', '\x2', '\x43', '\x44', '\a', 
		'h', '\x2', '\x2', '\x44', '\x45', '\a', '\x63', '\x2', '\x2', '\x45', 
		'\x46', '\a', 'n', '\x2', '\x2', '\x46', 'G', '\a', 'u', '\x2', '\x2', 
		'G', 'H', '\a', 'g', '\x2', '\x2', 'H', '\xE', '\x3', '\x2', '\x2', '\x2', 
		'I', 'J', '\a', ',', '\x2', '\x2', 'J', '\x10', '\x3', '\x2', '\x2', '\x2', 
		'K', 'L', '\a', '\x31', '\x2', '\x2', 'L', '\x12', '\x3', '\x2', '\x2', 
		'\x2', 'M', 'N', '\a', '-', '\x2', '\x2', 'N', '\x14', '\x3', '\x2', '\x2', 
		'\x2', 'O', 'P', '\a', '/', '\x2', '\x2', 'P', '\x16', '\x3', '\x2', '\x2', 
		'\x2', 'Q', 'R', '\a', '@', '\x2', '\x2', 'R', '\x18', '\x3', '\x2', '\x2', 
		'\x2', 'S', 'T', '\a', '@', '\x2', '\x2', 'T', 'U', '\a', '?', '\x2', 
		'\x2', 'U', '\x1A', '\x3', '\x2', '\x2', '\x2', 'V', 'W', '\a', '>', '\x2', 
		'\x2', 'W', '\x1C', '\x3', '\x2', '\x2', '\x2', 'X', 'Y', '\a', '>', '\x2', 
		'\x2', 'Y', 'Z', '\a', '?', '\x2', '\x2', 'Z', '\x1E', '\x3', '\x2', '\x2', 
		'\x2', '[', '\\', '\a', '?', '\x2', '\x2', '\\', ' ', '\x3', '\x2', '\x2', 
		'\x2', ']', '^', '\a', '*', '\x2', '\x2', '^', '\"', '\x3', '\x2', '\x2', 
		'\x2', '_', '`', '\a', '+', '\x2', '\x2', '`', '$', '\x3', '\x2', '\x2', 
		'\x2', '\x61', '\x63', '\a', '/', '\x2', '\x2', '\x62', '\x61', '\x3', 
		'\x2', '\x2', '\x2', '\x62', '\x63', '\x3', '\x2', '\x2', '\x2', '\x63', 
		'\x65', '\x3', '\x2', '\x2', '\x2', '\x64', '\x66', '\t', '\x2', '\x2', 
		'\x2', '\x65', '\x64', '\x3', '\x2', '\x2', '\x2', '\x66', 'g', '\x3', 
		'\x2', '\x2', '\x2', 'g', '\x65', '\x3', '\x2', '\x2', '\x2', 'g', 'h', 
		'\x3', '\x2', '\x2', '\x2', 'h', 'o', '\x3', '\x2', '\x2', '\x2', 'i', 
		'k', '\a', '\x30', '\x2', '\x2', 'j', 'l', '\t', '\x2', '\x2', '\x2', 
		'k', 'j', '\x3', '\x2', '\x2', '\x2', 'l', 'm', '\x3', '\x2', '\x2', '\x2', 
		'm', 'k', '\x3', '\x2', '\x2', '\x2', 'm', 'n', '\x3', '\x2', '\x2', '\x2', 
		'n', 'p', '\x3', '\x2', '\x2', '\x2', 'o', 'i', '\x3', '\x2', '\x2', '\x2', 
		'o', 'p', '\x3', '\x2', '\x2', '\x2', 'p', '&', '\x3', '\x2', '\x2', '\x2', 
		'q', 'u', '\t', '\x3', '\x2', '\x2', 'r', 't', '\t', '\x4', '\x2', '\x2', 
		's', 'r', '\x3', '\x2', '\x2', '\x2', 't', 'w', '\x3', '\x2', '\x2', '\x2', 
		'u', 's', '\x3', '\x2', '\x2', '\x2', 'u', 'v', '\x3', '\x2', '\x2', '\x2', 
		'v', '(', '\x3', '\x2', '\x2', '\x2', 'w', 'u', '\x3', '\x2', '\x2', '\x2', 
		'x', 'y', '\a', '=', '\x2', '\x2', 'y', '*', '\x3', '\x2', '\x2', '\x2', 
		'z', '{', '\a', '\x31', '\x2', '\x2', '{', '|', '\a', '\x31', '\x2', '\x2', 
		'|', '~', '\x3', '\x2', '\x2', '\x2', '}', '\x7F', '\v', '\x2', '\x2', 
		'\x2', '~', '}', '\x3', '\x2', '\x2', '\x2', '\x7F', '\x80', '\x3', '\x2', 
		'\x2', '\x2', '\x80', '\x81', '\x3', '\x2', '\x2', '\x2', '\x80', '~', 
		'\x3', '\x2', '\x2', '\x2', '\x81', '\x83', '\x3', '\x2', '\x2', '\x2', 
		'\x82', '\x84', '\t', '\x5', '\x2', '\x2', '\x83', '\x82', '\x3', '\x2', 
		'\x2', '\x2', '\x84', '\x85', '\x3', '\x2', '\x2', '\x2', '\x85', '\x86', 
		'\b', '\x16', '\x2', '\x2', '\x86', ',', '\x3', '\x2', '\x2', '\x2', '\x87', 
		'\x89', '\t', '\x6', '\x2', '\x2', '\x88', '\x87', '\x3', '\x2', '\x2', 
		'\x2', '\x89', '\x8A', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x88', '\x3', 
		'\x2', '\x2', '\x2', '\x8A', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x8B', 
		'\x8C', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8D', '\b', '\x17', '\x2', 
		'\x2', '\x8D', '.', '\x3', '\x2', '\x2', '\x2', '\v', '\x2', '\x62', 'g', 
		'm', 'o', 'u', '\x80', '\x83', '\x8A', '\x3', '\b', '\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
